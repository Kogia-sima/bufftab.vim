# Test case
Execute (Initialize):
  execute "bd 1"
  call bufftab#update()
  let buffers = copy(bufftab#get_bufs())
  let vader_bufnums = len(buffers) - 1
  unlet buffers

# When not specifying filename, name its buffer '[No Name]'
Execute (No Name Buffer):
  let buffers = copy(bufftab#get_bufs())
  AssertEqual '[No Name] ', buffers[winbufnr(0)].label
  AssertEqual '', buffers[winbufnr(0)].pre
  unlet buffers

# directory should not be listed in buffer list
Execute (Directory):
  execute "e vader.vim"
  let buffers = copy(bufftab#get_bufs())
  AssertEqual -1, index(keys(buffers), winbufnr(0))
  AssertEqual vader_bufnums + 1, len(buffers)

  call bufftab#close()
  AssertEqual vader_bufnums, len(bufftab#get_bufs())
  unlet buffers

# '+' mark should be added after editing buffer
Execute (Edit):
  execute "e tmp.txt"
  let buffers = copy(bufftab#get_bufs())
  AssertEqual -1, index(keys(buffers), winbufnr(0))
  AssertEqual vader_bufnums + 1, len(buffers)
  AssertEqual 'tmp.txt ', buffers[winbufnr(0)].label
  AssertEqual '', buffers[winbufnr(0)].pre

  call setline(1, "Hello!")
  AssertEqual '+ ', buffers[winbufnr(0)].pre

  execute "w!"
  AssertEqual '', buffers[winbufnr(0)].pre

  call bufftab#close()
  AssertEqual vader_bufnums, len(bufftab#get_bufs())
  unlet buffers

# Simple Buffer Switching
Execute (Buffer Switch):
  execute "e tmpA"
  execute "e tmpB"
  execute "e tmpC"
  let buffers = copy(bufftab#get_bufs())

  call bufftab#previous()
  AssertEqual 'tmpB ', buffers[winbufnr(0)].label

  call bufftab#previous()
  AssertEqual 'tmpA ', buffers[winbufnr(0)].label

  call bufftab#next()
  AssertEqual 'tmpB ', buffers[winbufnr(0)].label

  call bufftab#next()
  AssertEqual 'tmpC ', buffers[winbufnr(0)].label

  call bufftab#close()
  call bufftab#close()
  call bufftab#close()
  unlet buffers

# Same path should be handled as same buffer
Execute (Duplicate Path):
  execute "e tmpA"
  execute "e tmpB"
  execute "e tmpC"

  split
  execute "e tmpD"
  execute "e tmpA"

  AssertEqual vader_bufnums + 4, len(bufftab#get_bufs())

  call bufftab#next()
  call bufftab#close()

  AssertEqual vader_bufnums + 3, len(bufftab#get_bufs())
