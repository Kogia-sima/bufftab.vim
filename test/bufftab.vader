# Test case
Execute (Initialize):
  execute "bd 1"
  call bufftab#update()
  let buffers = copy(bufftab#get_bufs())
  let vader_bufnums = len(buffers) - 1
  unlet buffers

# When not specifying filename, name its buffer '[No Name]'
Execute (No Name Buffer):
  let buffers = copy(bufftab#get_bufs())
  AssertEqual buffers[winbufnr(0)].label, '[No Name] '
  AssertEqual buffers[winbufnr(0)].pre, ''
  unlet buffers

# directory should not be listed in buffer list
Execute (Directory):
  execute "e vader.vim"
  let buffers = copy(bufftab#get_bufs())
  AssertEqual index(keys(buffers), winbufnr(0)), -1
  AssertEqual len(buffers), vader_bufnums + 1

  call bufftab#close()
  AssertEqual len(bufftab#get_bufs()), vader_bufnums
  unlet buffers

# '+' mark should be added after editing buffer
Execute (Edit):
  execute "e tmp.txt"
  let buffers = copy(bufftab#get_bufs())
  AssertEqual index(keys(buffers), winbufnr(0)), -1
  AssertEqual len(buffers), vader_bufnums + 1
  AssertEqual buffers[winbufnr(0)].label, 'tmp.txt '
  AssertEqual buffers[winbufnr(0)].pre, ''

  call setline(1, "Hello!")
  AssertEqual buffers[winbufnr(0)].pre, '+ '

  execute "w!"
  AssertEqual buffers[winbufnr(0)].pre, ''

  call bufftab#close()
  AssertEqual len(bufftab#get_bufs()), vader_bufnums
  unlet buffers

# Simple Buffer Switching
Execute (Buffer Switch):
  execute "e tmpA"
  execute "e tmpB"
  execute "e tmpC"
  let buffers = copy(bufftab#get_bufs())

  call bufftab#previous()
  AssertEqual buffers[winbufnr(0)].label, 'tmpB '

  call bufftab#previous()
  AssertEqual buffers[winbufnr(0)].label, 'tmpA '

  call bufftab#next()
  AssertEqual buffers[winbufnr(0)].label, 'tmpB '

  call bufftab#next()
  AssertEqual buffers[winbufnr(0)].label, 'tmpC '

  call bufftab#close()
  call bufftab#close()
  call bufftab#close()
  unlet buffers

# Same path should be handled as same buffer
Execute (Duplicate Path):
  execute "e tmpA"
  execute "e tmpB"
  execute "e tmpC"

  split
  execute "e tmpD"
  execute "e tmpA"

  AssertEqual len(bufftab#get_bufs()), vader_bufnums + 4

  call bufftab#next()
  call bufftab#close()

  AssertEqual len(bufftab#get_bufs()), vader_bufnums + 3
